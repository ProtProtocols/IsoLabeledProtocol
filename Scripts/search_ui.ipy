"""
This module displays a user interface to define all settings
required to run a MS/MS search and the subsequent label-free
analysis.

Input (search_ui_in):
  :key on_complete_description: Text of the button displayed once the experimental
                                design has been saved. If this is not set, nothing will
                                be displayed once the user clicks "Save design"
  :key on_complete_function: Function called once the user clicked the complete button.
  :key on_change_input_dir: If set, this function is called whenever the user changes the input directory.
                            The function must look like on_change(search_ui_object, input_dir_path)

Output (search_ui_out):
    :key work_dir: Path to the working directory.
    :key precursor_tolerance: Precursor tolerance in ppm.
    :key fragment_tolerance: Fragment tolerance in Da.
    :key fasta_file: Path to the FASTA file.
    :key generate_decoy: Boolean indicating whether to generate decoy sequences.
    :key quantification_ptms: PTMs used by the quantification method (as string).
    :key quantification_method: Name of the quantification method.
    :key missed_cleavages: Number of missed cleavages allowed.
    :key fixed_mods: PTM string showing the fixed modifications set.
    :key var_mods: List of variable PTMs.
    :key summarization_method: Summarization method to use to combined peptide quantification values to proteins.
    :key min_protein_psms: Minimum PSMs per protein required.
    :key use_ptms_for_quant: Indicates whether PTMs should be used for the quantification.
    :key target_fdr: Target FDR to use (all levels).
    :key spec_file_dir: Path to the spectrum directories (or base directory when one MS sample type).
    :key number_groups: Number of experimental conditions.
    :key ref_condition: Normalize to this reference instead of mean of channels
    :key stat_condition: Carry out statistical tests with respect to this condition
    :key search_ui: The SearchUI object.
"""


import ipywidgets as widgets
from ipywidgets import VBox, Label, Layout, Text
import os
import pandas as pd
from IPython.display import Javascript, display
import json


global search_ui_in, search_ui_out


def main():
    global search_ui_in, search_ui_out

    # create the input object if it doesn't exist
    if "search_ui_in" not in globals():
        raise Exception("Missing required input parameter search_ui_in")
    else:
        if "on_complete_description" not in search_ui_in:
            raise Exception("Missing required input key 'on_complete_description'")
        if "on_complete_function" not in search_ui_in:
            raise Exception("Missing required input key 'on_complete_function'")

    # display the UI
    searchUI = SearchUI()
    searchUI.display()

    # test whether a configuration already exists in the default location
    if os.path.isdir("OUT") and os.path.isfile("OUT/protocol_parameters.json"):
        searchUI.load_config("OUT/protocol_parameters.json")

        # automatically generate a result object
        if os.path.isfile("OUT/exp_design.tsv"):
            global search_ui_out

            # create the output object
            search_ui_out = searchUI.get_settings_as_dict()
            # add the experimental design path
            search_ui_out["exp_design_file"] = "OUT/exp_design.tsv"
            # add the searchUI object
            search_ui_out["search_ui"] = searchUI


def final_button_clicked(searchUI, exp_design_file_path):
    """
    This function is executed once the user clicked the final
    button to execute the next step.
    :param searchUI:
    :param exp_design_file_path:
    """
    global search_ui_in, search_ui_out

    # create the output object
    search_ui_out = searchUI.get_settings_as_dict()

    # add the experimental design path
    search_ui_out["exp_design_file"] = exp_design_file_path

    # add the searchUI object
    search_ui_out["search_ui"] = searchUI
    
    # save parameters
    searchUI.save_config("/home/biodocker/OUT/protocol_parameters.json")

    # execute the user defined function
    if search_ui_in["on_complete_function"]:
        search_ui_in["on_complete_function"]()


class SearchUI:
    """
    Class used to manage the search specific user interface.
    """
    def __init__(self):
        """
        Initializes the SearchUI object and creates all user interface
        objects as member variables.
        """
        # folders
        self.spectra_dir = widgets.Dropdown(options={'IN': 'IN', 'data': 'data'}, value='IN')
        self.spectra_dir.observe(
            lambda change: self.updateSpectraDir(change["new"]) if change['type'] == 'change' and
                                                                   change['name'] == 'value' else None)
        # variable to store main folder or multiple folders with mgf files
        self.spectra_file_dirs = "IN"

        self.fasta_db = widgets.Dropdown(options={"sp_human.fasta": "IN/sp_human.fasta"})
        self.generate_decoy = widgets.Checkbox(value=True, description="Generate decoy sequences")

        # search settings
        self.precursor_tolerance = widgets.IntSlider(min=0, max=500, step=1, value=10)
        self.fragment_tolerance = widgets.BoundedFloatText(min=0, max=200, value=0.05)
        self.missed_cleavages = widgets.IntSlider(min=0, max=10, step=1, value=1)
        self.fixed_ptms = widgets.Dropdown(options=["Carbamidomethylation of C", "None"])
        self.var_ptms = widgets.SelectMultiple(
            options=["Oxidation of M",
                     "Phosphorylation of STY",
                     "Deamidation of N",
                     "Deamidation of Q",
                     "Acetylation of K",
                     "Acetylation of peptide N-term",
                     "Acetylation of protein N-term"],
            value=['Oxidation of M'])

        self.target_fdr = widgets.BoundedFloatText(min=0, max=1, value=0.01)

        # TODO  needs table to describe labeling formats
        self.labelling = widgets.Dropdown(options=
                                          {'TMT6': 'TMT 6-plex of K,TMT 6-plex of peptide N-term',
                                           'TMT10': 'TMT 10-plex of K,TMT 10-plex of peptide N-term',
                                           'TMT11': 'TMT 11-plex of K,TMT 11-plex of peptide N-term',
                                           'iTRAQ4 (Y fixed)': 'iTRAQ 4-plex of K,iTRAQ 4-plex of Y,iTRAQ 4-plex of peptide N-term',
                                           'iTRAQ4 (Y variable)': 'iTRAQ 4-plex of K,iTRAQ 4-plex of peptide N-term',
                                           'iTRAQ8 (Y fixed)': 'iTRAQ 8-plex of K,iTRAQ 8-plex of Y,iTRAQ 8-plex of peptide N-term',
                                           'iTRAQ8 (Y variable)': 'iTRAQ 8-plex of K,iTRAQ 8-plex of peptide N-term'},
                                          value='iTRAQ 8-plex of K,iTRAQ 8-plex of Y,iTRAQ 8-plex of peptide N-term')

        # quantification settings
        self.summarization_method = widgets.Dropdown(options=
                                                     {"Median of all PSMs": "median",
                                                      "Average of all PSMs": "mean",
                                                      "Median with removal of outliers": "medpolish",
                                                      "iPQF: weighted by peptide features (removes all proteins with "
                                                      "missing values)": "iPQF",
                                                      "Robust summarization (linear model rlm)": "robust"},
                                                     value='medpolish')
        self.min_protein_psms = widgets.IntSlider(min=0, max=10, step=1, value=1)
        self.use_ptms_for_quant = widgets.Checkbox(value=True, description="Use PTMs for quantification")
        self.method_peptide_inference = widgets.Dropdown(options={
                                                            "Group shared proteins": "grouping"
                                                         },
                                                         value="grouping")

        # get number of experimental conditions
        self.number_groups = widgets.IntSlider(min=2, max=20, step=1, value=2)
        self.number_groups.observe(self.updateQuantOptions)

        
        
        # Option to select reference condition
        all_groups = list()
        ref_groups = list()
        for group in range(0, self.number_groups.value):
            all_groups.append("Group " + str(group+1))
        ref_groups.append('Mean over channels')
        ref_groups.extend(all_groups)
        self.ref_condition = widgets.ToggleButtons(options=ref_groups,
            description='')

        # set control condition for statistical tests 
        self.stat_condition = widgets.ToggleButtons(options=all_groups,
            description='')

        
        # button to show experimental design
        self.exp_des_button = widgets.Button(
            description='Generate design',
            disabled=False,
            button_style='',  # 'success', 'info', 'warning', 'danger' or ''
            tooltip='Generate the experimental design',
            icon='check'
        )

        self.exp_des_button.on_click(lambda _: self.show_exp_design())
        # create the expDesignUI object once the search UI is being displayed
        self.expDesignUI = None

        # button to reset the experimental design settings
        self.reset_exp_des_btn = widgets.Button(
            description='Reset design',
            disabled=True,
            button_style='danger',
            tooltip='Reset and delete the experimental design'
        )
        self.reset_exp_des_btn.on_click(lambda _: self.reset_exp_design())

        # button to launch the search - only enabled if the exp design is entered and saved
        self.search_button = widgets.Button(
            description=search_ui_in["on_complete_description"],
            disabled=True,
            button_style='success',  # 'success', 'info', 'warning', 'danger' or ''
            tooltip='This can only be launched when the experimental design is saved.'
        )

        self.search_button.on_click(
            lambda _: final_button_clicked(self, self.expDesignUI.result_file_path)
        )

    def change_tab(self, tab_index: int):
        """
        Change to the defined tab
        :param tab_index: Index of the tab to change to
        """
        if self.tabs:
            self.tabs.selected_index = tab_index

            # scroll to the top of the current cell
            display(Javascript('Jupyter.notebook.scroll_to_cell(Jupyter.notebook.get_selected_index())'))

    def move_to_next_tab(self):
        """
        Select the next tab
        """
        self.change_tab(self.tabs.selected_index + 1)

    def get_work_dir(self):
        """
        Returns the current working directory.
        :return: String (absolute path)
        """
        # Option to choose a different output folder was removed.
        return os.path.abspath("OUT")

    def get_spectra_file_dirs(self):
        spectra_dirs = list()
        for i in range(0, len(self.spectra_file_dirs)):
            spectra_dirs.append(os.path.basename(self.spectra_file_dirs[i]))
        return list(spectra_dirs)

    def get_labelling_method(self):
        return list(self.labelling.options.keys())[self.labelling.index]

    def show_exp_design(self, change_tab: bool = True):
        """
        Display the experimental design dialog. This function is called
        through the button at the end of the SearchUI dialog
        :param change_tab: Indicates whether the tab shoule be changed
        """
        # disable the exp_design button and the labelling method
        self.exp_des_button.disabled = True
        self.labelling.disabled = True
        self.spectra_dir.disabled = True
        self.number_groups.disabled = True
        self.reset_exp_des_btn.disabled = False

        # self.tab.selected_index = 1
        self.expDesignUI = ExpDesignUI(self)
        exp_design_widget = self.expDesignUI.get_root_widget()
        self.vbox_exp_design.children = [exp_design_widget]

        # change the selected tab
        if change_tab:
            self.change_tab(1)

    def reset_exp_design(self):
        """
        This function removes the shown experimental design
        and enables all associated buttons again.
        """
        self.exp_des_button.disabled = False
        self.labelling.disabled = False
        self.spectra_dir.disabled = False
        self.number_groups.disabled = False
        self.reset_exp_des_btn.disabled = True
        self.set_enable_search_btn(False)

        # delete the expDesignUI object and exp_design file just in case
        if os.path.isfile(self.expDesignUI.result_file_path):
            os.remove(self.expDesignUI.result_file_path)

        self.expDesignUI = None

        # add the placeholder again
        self.vbox_exp_design.children = [widgets.HTML("<h5>Please click 'Generate Design' first</h5>")]

    def set_enable_search_btn(self, is_enabled: bool):
        """
        Enable or disable the search button
        :param is_enabled: Indicates whether the button is enabled or disabled
        """
        self.search_button.disabled = not is_enabled

    def updateQuantOptions(self, change):
        """
        Upon changes of number of conditions, set the correct values to the ref_ and stat_condition
        """
        all_groups = list()
        ref_groups = list()
        for group in range(0, self.number_groups.value):
            all_groups.append("Group " + str(group+1))
        ref_groups.append('Mean over channels')
        ref_groups.extend(all_groups)
        self.ref_condition.options = ref_groups
        self.stat_condition.options = all_groups


    def updateFastaFiles(self, spectradir):
        """
        Update the drop-down list that lists all available FASTA files found in the
        current input directory.]
        :param spectradir: The current working directory used to search for FASTA files.
        """
        # get all FASTA files
        fasta_files = [file for file in os.listdir(spectradir) if file.endswith(".fasta") and ('decoy' not in file)]

        # also search all subdirectories for FASTA files
        for d in os.listdir(spectradir):
            d_path = os.path.join(spectradir, d)
            if os.path.isdir(d_path) and d[0] != "." and os.access(d_path, os.R_OK):
                fasta_files += [os.path.join(d, file) for file in os.listdir(d_path)
                                                        if file.endswith(".fasta") and ('decoy' not in file)]

        # create the dict to add as values to the control
        file_list = dict()
        sel_value = None

        for f in fasta_files:
            file_list[f] = os.path.join(os.path.abspath(spectradir), f)
            if sel_value is None:
                sel_value = os.path.join(os.path.abspath(spectradir), f)

        self.fasta_db.options = file_list
        self.fasta_db.value = sel_value

    def updateSpectraDir(self, spectradir):
        """
        check the spectradir folder for subfolders and whether they contain mgf files 
        and thus define multiple MS runs
        param: spectradir folder where spectra are stored
        """
        if spectradir == None:
            spectradir = 'IN'

        spectradir = os.path.abspath(spectradir)
        dirList = os.listdir(spectradir)
        sampledirs = []
        mgf_files_basedir = 0

        # updating fasta files
        self.updateFastaFiles(spectradir)
    
        for file in dirList:
            file_path = os.path.join(spectradir, file)

            # if it's a file, test whether it's an MGF file
            if os.path.isfile(file_path) and file.lower().endswith(".mgf"):
                mgf_files_basedir += 1
            # if it's a directory, check whether it contains MGF files
            elif os.path.isdir(file_path) and os.access(file_path, os.R_OK):
                for file2 in os.listdir(file_path):
                    if file2.lower().endswith(".mgf"):
                      sampledirs.append(file_path)

        # keep only unique sampledirs
        sampledirs = set(sampledirs)
        sampledirs = sorted(list(sampledirs))
        
        if mgf_files_basedir > 0 and len(sampledirs) > 0:
            self.show_dialog('Place mgf-files either in the main folder or in '
                                     'separate subfolders when having the sample distributed over multiple '
                                     'iTRAQ/TMT runs!', style="error")
            self.exp_des_button.disabled=True
        elif mgf_files_basedir == 0 and len(sampledirs) == 0:
            self.show_dialog("No MGF files found!", style="error")
            self.exp_des_button.disabled=True
        else:
            self.exp_des_button.disabled=False
            if len(sampledirs) > 0:
                self.spectra_file_dirs = sampledirs
            else:
                self.spectra_file_dirs = list()
                self.spectra_file_dirs.append(spectradir)

        # call the user defined function if defined
        global search_ui_in

        if "on_change_input_dir" in search_ui_in:
            search_ui_in["on_change_input_dir"](self, spectradir)

    def display(self):
        """
        Displays the search user interface.
        """
        self.vbox_search = VBox([
            widgets.HTML("<h4>Folders and files</h4>"),
            widgets.HTML('Folder for spectra files (files need to be mgf) and fasta database<br/>'
                         '(remove <i>iTRAQCancer.mgf</i> when using <i>IN</i>)'),
            self.spectra_dir,
            widgets.HTML(value="<h4>Database search</h4>"),
            Label('Fasta file (database, must NOT contain decoy sequences):'), self.fasta_db,
            self.generate_decoy,
            Label('Precursor tolerance (ppm):'), self.precursor_tolerance,
            Label('Fragment ion tolerance (da):'), self.fragment_tolerance,
            Label('Number of miscleavages;'), self.missed_cleavages,
            Label('Further fixed modifications'), self.fixed_ptms,
            Label('Further variable modifications (Hold Ctrl to select multiple)'), self.var_ptms,
            Label('Target (protein, peptide, and PSM) FDR:'), self.target_fdr,
            Label('Quantification method:'), self.labelling,
            Label('Number of different experimental conditions (e.g. control and treatment)'), self.number_groups,
            Label('Note: When entering the experimental design, the labelling method and number of groups can no '
                  'longer be changed unless the experimental design is reset.'),
            widgets.HBox([self.exp_des_button, self.reset_exp_des_btn])])

        # vbox_exp_design is used as a placeholder for the experimental design
        self.vbox_exp_design = VBox([widgets.HTML("<h5>Please click 'Generate Design' first</h5>")])

        self.vbox_quant_params = VBox([
            Label('Summarization method:'), self.summarization_method,
            Label('Minimum number of PSMs per protein:'), self.min_protein_psms,
            self.use_ptms_for_quant,
            Label('Peptide inference method:'), self.method_peptide_inference,
            Label("Reference condition for normalization:"),self.ref_condition,
            Label("Experimental control condition for statistical tests:"),self.stat_condition,            
            self.search_button
            
            ])

        self.tabs = widgets.Tab()
        self.tabs.children = [self.vbox_search, self.vbox_exp_design, self.vbox_quant_params]
        self.tabs.set_title(0, "Folders and search")
        self.tabs.set_title(1, "Experimental design")
        self.tabs.set_title(2, "Quantitative analysis")

        display(self.tabs)

        self.updateSpectraDir(self.spectra_dir.value)

    def show_dialog(self, message: str, style: str= "default"):
        """
        Displays a model dialog to the user
        :param message: The (HTML formatted) message to display
        :param style: Can be "default", "warning", or "error"
        """
        title = "Status"

        if style == "error":
            title = "Error"
        elif style == "warning":
            title = "Warning"

        display(Javascript(
            'requirejs("base/js/dialog").modal({title: "' + title + '", body: "' + message + '", buttons: {OK: {}}})')
        )

    def _ipython_display_(self):
        return self.display()

    def set_settings_from_dict(self, settings: dict):
        """
        Sets the settings of all UI components based on a JSON
        fromatted settings string.
        :param settings: A dict representing the settings.
        """
        # workdir is currently not used

        # derive the input directory from the spectra directories
        if "/home/biodocker/IN" in settings["input_directory"][0]:
            self.spectra_dir.value = "IN"
        elif "/home/biodocker/data" in settings["input_directory"][0]:
            self.spectra_dir.value = "data"

        # update the drop-down for available FASTA DBs and spectra directories
        self.updateFastaFiles(self.spectra_dir.value)
        self.updateSpectraDir(self.spectra_dir.value)

        # make sure that the structure did not change
        if self.spectra_file_dirs != settings["input_directory"]:
            raise Exception("Directory structure changed")

        self.precursor_tolerance.value = settings["precursor_tolerance"]
        self.fragment_tolerance.value = settings["fragment_tolerance"]
        self.fasta_db.value = settings["fasta_db"]
        self.generate_decoy.value = settings["generate_decoy"]
        self.labelling.value = settings["labelling"]
        self.missed_cleavages.value = settings["missed_cleavages"]
        self.fixed_ptms.value = settings["fixed_ptms"]
        self.var_ptms.value = settings["var_ptms"]
        self.summarization_method.value = settings["summarization_method"]
        self.min_protein_psms.value = settings["min_protein_psms"]
        self.use_ptms_for_quant.value = settings["use_ptms_for_quant"]
        self.target_fdr.value = settings["target_fdr"]
        self.number_groups.value = settings["number_groups"]

        # all new features need to check whether the config is available
        if "ref_condition" in settings:
            self.ref_condition.value = settings["ref_condition"]
        if "stat_condition" in settings:
            self.stat_condition.value = settings["stat_condition"]
        if "method_peptide_inference" in settings:
            self.method_peptide_inference.value = settings["method_peptide_inference"]

        # load the experimental design
        try:
            self.load_exp_design()
            self.show_dialog("Previous settings successfully loaded")
        except Exception as e:
            self.show_dialog(str(e) + ". Experimental design not loaded.", style="warning")

    def load_exp_design(self, result_file_path=None):
        """
        Load the experimental design.
        :param result_file_path: If set, this file will be used to load the experimental design. Otherwise,
        the default location will be used.
        """
        # regenerate the experimental design
        self.show_exp_design(change_tab=False)

        try:
            design_loaded = self.expDesignUI.load_design(result_file_path)
        except Exception as e:
            # reset any already added settings
            self.show_exp_design(change_tab=False)
            raise e

        if design_loaded:
            self.set_enable_search_btn(True)

    def get_settings_as_dict(self):
        """
        Transform all settings entered by the user into a dict.
        :return:
        """
        search_config = dict()
        search_config["workdir"] = self.get_work_dir()
        search_config["precursor_tolerance"] = self.precursor_tolerance.value
        search_config["fragment_tolerance"] = self.fragment_tolerance.value
        search_config["fasta_db"] = self.fasta_db.value
        search_config["generate_decoy"] = self.generate_decoy.value
        search_config["labelling"] = self.labelling.value
        search_config["labelling_method"] = self.get_labelling_method()
        search_config["missed_cleavages"] = self.missed_cleavages.value
        search_config["fixed_ptms"] = self.fixed_ptms.value
        search_config["var_ptms"] = self.var_ptms.value
        search_config["summarization_method"] = self.summarization_method.value
        search_config["min_protein_psms"] = self.min_protein_psms.value
        search_config["use_ptms_for_quant"] = self.use_ptms_for_quant.value
        search_config["target_fdr"] = self.target_fdr.value
        search_config["input_directory"] = self.spectra_file_dirs
        search_config["number_groups"] = self.number_groups.value
        search_config["ref_condition"] = self.ref_condition.value
        search_config["stat_condition"] = self.stat_condition.value
        search_config["method_peptide_inference"] = self.method_peptide_inference.value

        return search_config

    def load_config(self, file: str):
        """
        Load the configuration from a JSON formatted text file.
        :param file: Path to the file
        """
        with open(file, "r") as reader:
            settings = json.load(reader)
            self.set_settings_from_dict(settings)

    def save_config(self, file):
        """
        Save all configurations set by the user into a JSON formatted
        text file.
        :param: file: The name of the target file to use. Will be overwritten if it exists.
        """
        search_config = self.get_settings_as_dict()

        json_string = json.dumps(search_config)

        print("Saving parameters to " + file)

        with open(file, "w") as writer:
            writer.write(json_string)


class ExpDesignUI:
    def __init__(self, searchUI: SearchUI):
        """
        Generates all use interface objects as member variables.

        :param searchUI: Parent user interface
        """

        self.searchUI = searchUI

        self.result_file_path = os.path.join(searchUI.get_work_dir(), "exp_design.tsv")
        
        # in the case of multiple iTRAQ/TMT runs, get subfolders, otherwise this is main spectra folder
        self.spectra_file_dirs = searchUI.get_spectra_file_dirs()
        if len(self.spectra_file_dirs) == 0:
            raise Exception("No spectra directory")

        # Different experimental conditions
        self.group_names = list()
        self.group_ids = list()
        self.group_names.append(widgets.Text(placeholder="Control", description="Group 1:"))
        self.group_ids.append("Group 1")
        for group in range(1, searchUI.number_groups.value):
            self.group_names.append(widgets.Text(placeholder="Treatment " + str(group), description="Group " + str(group+1) + ":"))
            self.group_ids.append("Group " + str(group+1))          
        
        self.channels = {
            'TMT6': ["126", "127", "128", "129", "130", "131"],
            'TMT10': ["126", "127N", "127C", "128N", "128C", "129N", "129C", "130N", "130C", "131"],
            'iTRAQ4': ["114", "115", "116", "117"],
            'iTRAQ8': ["113", "114", "115", "116", "117", "118", "119", "121"]
        }

        # removed everything in string labelling_technique after space
        labelling_method = searchUI.get_labelling_method()
        if labelling_method.split(" ")[0] not in self.channels:
            raise Exception("Unknown labelling technique: '" + labelling_method + "'")

        self.labelling_technique = labelling_method.split(" ")[0]

        # generate the textfields for the channels
        # channel_names contains list of list with all channels given for each sample folder
        self.channel_names = list()
        # add select boxes to select the experimental group
        self.group_selects = list()
        for sample_dir in range(0,len(self.spectra_file_dirs)): 

            self.channel_names.append(list())
            self.group_selects.append(list())
            for channel in self.channels[self.labelling_technique]:
                (self.channel_names[sample_dir]).append(widgets.Text(description=channel, placeholder="Sample " + channel))
                (self.group_selects[sample_dir]).append(widgets.Dropdown(options=self.group_ids, value="Group 1"))

        self.save_button = widgets.Button(
            description='Save design',
            disabled=False,
            button_style='',  # 'success', 'info', 'warning', 'danger' or ''
            tooltip='Save the experimental design',
            icon='check'
        )

        self.save_button.on_click(self.save_design)

        self.search_button_visible = False

    def get_root_widget(self):
        """
        Displays the user interface to enter the experimental design.
        :return: Returns a widget containing the experimental user interface.
        """
        widget_list = list()
        widget_list.append(widgets.Label("Treatment group names:"))
        widget_list.extend(self.group_names)
        
        for sample_dir in range(0,len(self.spectra_file_dirs)): 
            widget_list.append(widgets.HTML("<br/>"))
            widget_list.append(widgets.HTML("Assign sample to channels in folder <b>" + self.spectra_file_dirs[sample_dir] + "</b>"))
            for i in range(0, len(self.channel_names[sample_dir])):
                widget_list.append(widgets.HBox([self.channel_names[sample_dir][i], self.group_selects[sample_dir][i]]))

        widget_list.append(widgets.HTML("<b>Note:</b> Changes to the experimental design only take effect when "
                                        "clicking the 'Save design' button."))
        widget_list.append(self.save_button)

        widget_box = VBox(widget_list)

        return widget_box

    def save_design(self, button):
        """
        Save the experimental design as a TSV file.
        :param button: The button that triggered the function.
        """
        global search_ui_in

        sample_names = list()
        channel_names = list()
        sample_group = list()
        sample_group_names = list()
        sample_dir_names = list()
        for sample_dir in range(0,len(self.spectra_file_dirs)): 

            # get all names
            sample_names.extend([s.value if s.value != "" else s.placeholder for s in self.channel_names[sample_dir]])
            channel_names.extend(self.channels[self.labelling_technique])
            sample_group.extend([g.value for g in self.group_selects[sample_dir]])

            # replace the group names
            for i in range(0, len(self.channel_names[sample_dir])):
                ind = int(self.group_selects[sample_dir][i].value.replace("Group ","")) -1 
                group = self.group_selects[sample_dir][i].value
                sample_group_names.append(self.group_names[ind].value if self.group_names[ind].value != "" else self.group_names[ind].placeholder)

                
            sample_dir_names.extend([self.spectra_file_dirs[sample_dir]] * len(self.channel_names[sample_dir]))
  
        # Write into frame and file
        design_data = pd.DataFrame(
            data={'channel': channel_names, 'sample_name': sample_names, 'sample_group': sample_group, 'sample_orig': sample_group_names, 'spec_dir': sample_dir_names},
        )

        design_data.to_csv(path_or_buf=self.result_file_path, sep="\t", index=False)

        # enable the run search button
        self.searchUI.set_enable_search_btn(True)

        # move to the next tab
        self.searchUI.move_to_next_tab()

    def load_design(self, result_file_path: str = None) -> bool:
        """
        Load the experimental design settings from the defined
        result_file_path.
        :param result_file_path: If this is set, this file will be loaded as experimental design file. Otherwise,
        the result_file_path member variable will be used.
        :return: Boolean indicating whether the design was loaded
        """
        if result_file_path is None:
            result_file_path = self.result_file_path

        if not os.path.isfile(result_file_path):
            return False

        # load the design
        design = pd.read_csv(result_file_path, sep="\t")

        # get sample group names
        group_names = dict()

        for i in range(len(design)):
            group_names[design["sample_group"][i]] = design["sample_orig"][i]

        for i in range(len(self.group_names)):
            group_id = "Group " + str(i + 1)
            if group_id in group_names:
                self.group_names[i].value = group_names[group_id]
                
        # TODO get reference conditions

        # get the folders and make sure they exist
        spec_dirs = set([s for s in design["spec_dir"]])

        if len(spec_dirs) != len(self.spectra_file_dirs):
            raise Exception("Different numbers of spectra directories found.")

        for spec_dir in spec_dirs:
            if spec_dir not in self.spectra_file_dirs:
                raise Exception(spec_dir + " missing in GUI")

        # create a dict to set the sample ids
        samples_per_dir = dict()

        for i in range(len(design)):
            sample_dir = design["spec_dir"][i]
            if sample_dir not in samples_per_dir:
                samples_per_dir[sample_dir] = list()

            samples_per_dir[sample_dir].append({
                "group": design["sample_group"][i],
                "name": design["sample_name"][i]
            })

        # set the sample options
        for sample_dir_index in range(len(self.spectra_file_dirs)):
            sample_dir = self.spectra_file_dirs[sample_dir_index]

            for channel_index in range(len(samples_per_dir[sample_dir])):
                self.channel_names[sample_dir_index][channel_index].value = samples_per_dir[sample_dir][channel_index]["name"]
                self.group_selects[sample_dir_index][channel_index].value = samples_per_dir[sample_dir][channel_index]["group"]

        return True


# global stuff
if __name__ == "__main__":
    main()
